{"version":3,"sources":["0.e4c507448a9a0d1b9266.chunk.js","/Users/a1100490/IdeaProjects/RxAngular/node_modules/ieee754/index.js","/Users/a1100490/IdeaProjects/RxAngular/src/app/container/shared/shared.module.ts","/Users/a1100490/IdeaProjects/RxAngular/src/app/component/list/list.component.ts","/Users/a1100490/IdeaProjects/RxAngular/node_modules/base64-js/index.js","/Users/a1100490/IdeaProjects/RxAngular/src/$_gendir/app/component/list/list.component.ngfactory.ts","/Users/a1100490/IdeaProjects/RxAngular/src/$_gendir/app/component/list/list.component.css.shim.ngstyle.ts","/Users/a1100490/IdeaProjects/RxAngular/node_modules/buffer/node_modules/isarray/index.js","/Users/a1100490/IdeaProjects/RxAngular/src/app/service/hacker-news.service.ts","/Users/a1100490/IdeaProjects/RxAngular/node_modules/buffer/index.js"],"names":["webpackJsonp","7WRt","module","exports","read","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","i","d","s","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","Cor3","__webpack_exports__","__webpack_require__","SharedModule","c9uO","ListComponent","prototype","ngOnInit","ctorParameters","jxpy","placeHoldersCount","b64","len","length","Error","byteLength","toByteArray","l","tmp","placeHolders","arr","Arr","L","revLookup","charCodeAt","tripletToBase64","num","lookup","encodeChunk","uint8","start","end","output","push","join","fromByteArray","extraBytes","parts","len2","Uint8Array","Array","code","oQW5","View_ListComponent_0","_l","core_es5","View_ListComponent_Host_0","RenderType_ListComponent","list_component","_ck","_v","styles","styles_ListComponent","encapsulation","data","rD4C","toString","isArray","call","u32x","HackerNewsService","__WEBPACK_IMPORTED_MODULE_0__angular_common_http__","Api","NEWS","NEWEST","ASK","SHOW","JOBS","http","this","request","sApi","get","fetchNEWS","fetchNEWEST","fetchASK","fetchSHOW","fetchJOBS","type","v0OU","global","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","from","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","string","isEncoding","actual","slice","fromArrayLike","array","byteOffset","obj","isBuffer","copy","isnan","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","n","bidirectionalIndexOf","val","dir","arrayIndexOf","indexOf","lastIndexOf","buf","indexSize","readUInt16BE","arrLength","valLength","String","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","replace","INVALID_BASE64_RE","trim","units","leadSurrogate","byteArray","hi","lo","src","dst","INSPECT_MAX_BYTES","foo","subarray","poolSize","_augment","Symbol","species","Object","defineProperty","configurable","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","equals","inspect","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set"],"mappings":"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","file":"0.e4c507448a9a0d1b9266.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ \"7WRt\":\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n\n/***/ \"Cor3\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SharedModule; });\nvar SharedModule = (function () {\n    function SharedModule() {\n    }\n    return SharedModule;\n}());\n\n//# sourceMappingURL=shared.module.js.map\n\n/***/ }),\n\n/***/ \"c9uO\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ListComponent; });\nvar ListComponent = (function () {\n    function ListComponent() {\n    }\n    ListComponent.prototype.ngOnInit = function () {\n    };\n    ListComponent.ctorParameters = function () { return []; };\n    return ListComponent;\n}());\n\n\n\n\n\n\n/***/ }),\n\n/***/ \"jxpy\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ }),\n\n/***/ \"oQW5\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// CONCATENATED MODULE: /Users/a1100490/IdeaProjects/RxAngular/src/$$_gendir/app/component/list/list.component.css.shim.ngstyle.ts\nvar styles = [''];\n//# sourceMappingURL=list.component.css.shim.ngstyle.js.map\n// EXTERNAL MODULE: /Users/a1100490/IdeaProjects/RxAngular/node_modules/@angular/core/@angular/core.es5.js\nvar core_es5 = __webpack_require__(\"/oeL\");\n\n// EXTERNAL MODULE: /Users/a1100490/IdeaProjects/RxAngular/src/app/component/list/list.component.ts\nvar list_component = __webpack_require__(\"c9uO\");\n\n// CONCATENATED MODULE: /Users/a1100490/IdeaProjects/RxAngular/src/$$_gendir/app/component/list/list.component.ngfactory.ts\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return RenderType_ListComponent; });\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = View_ListComponent_0;\n/* unused harmony export View_ListComponent_Host_0 */\n/* unused harmony export ListComponentNgFactory */\n\n\n\nvar styles_ListComponent = [styles];\nvar RenderType_ListComponent = core_es5[\"_0\" /* ɵcrt */]({ encapsulation: 0,\n    styles: styles_ListComponent, data: {} });\nfunction View_ListComponent_0(_l) {\n    return core_es5[\"_20\" /* ɵvid */](0, [(_l()(), core_es5[\"_2\" /* ɵeld */](0, null, null, 1, 'p', [], null, null, null, null, null)), (_l()(),\n            core_es5[\"_18\" /* ɵted */](null, ['\\n  list works!\\n'])), (_l()(), core_es5[\"_18\" /* ɵted */](null, ['\\n']))], null, null);\n}\nfunction View_ListComponent_Host_0(_l) {\n    return core_es5[\"_20\" /* ɵvid */](0, [(_l()(), core_es5[\"_2\" /* ɵeld */](0, null, null, 1, 'app-list', [], null, null, null, View_ListComponent_0, RenderType_ListComponent)),\n        core_es5[\"_1\" /* ɵdid */](114688, null, 0, list_component[\"a\" /* ListComponent */], [], null, null)], function (_ck, _v) {\n        _ck(_v, 1, 0);\n    }, null);\n}\nvar ListComponentNgFactory = core_es5[\"Y\" /* ɵccf */]('app-list', list_component[\"a\" /* ListComponent */], View_ListComponent_Host_0, {}, {}, []);\n//# sourceMappingURL=list.component.ngfactory.js.map\n\n/***/ }),\n\n/***/ \"rD4C\":\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ }),\n\n/***/ \"u32x\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return HackerNewsService; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common_http__ = __webpack_require__(\"XKz0\");\n\nvar Api = {\n    NEWS: '/api/v0/news.json',\n    NEWEST: '/api/v0/newest.json',\n    ASK: '/api/v0/ask.json',\n    SHOW: '/api/v0/show.json',\n    JOBS: '/api/v0/jobs.json'\n};\nvar HackerNewsService = (function () {\n    function HackerNewsService(http) {\n        this.http = http;\n    }\n    HackerNewsService.prototype.request = function (sApi) {\n        return this.http.get(\"https://hnpwa.com\" + sApi);\n    };\n    HackerNewsService.prototype.fetchNEWS = function () {\n        return this.request(Api.NEWS);\n    };\n    HackerNewsService.prototype.fetchNEWEST = function () {\n        return this.request(Api.NEWEST);\n    };\n    HackerNewsService.prototype.fetchASK = function () {\n        return this.request(Api.NEWS);\n    };\n    HackerNewsService.prototype.fetchSHOW = function () {\n        return this.request(Api.SHOW);\n    };\n    HackerNewsService.prototype.fetchJOBS = function () {\n        return this.request(Api.JOBS);\n    };\n    HackerNewsService.ctorParameters = function () { return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_common_http__[\"c\" /* HttpClient */] }]; };\n    return HackerNewsService;\n}());\n\n\n\n\n\n\n/***/ }),\n\n/***/ \"v0OU\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(\"jxpy\")\nvar ieee754 = __webpack_require__(\"7WRt\")\nvar isArray = __webpack_require__(\"rD4C\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"fRUx\")))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.e4c507448a9a0d1b9266.chunk.js","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/a1100490/IdeaProjects/RxAngular/node_modules/ieee754/index.js\n// module id = 7WRt\n// module chunks = 0","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ListComponent } from '../../component/list/list.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    ListComponent\n  ],\n  declarations: [\n    ListComponent\n  ]\n})\nexport class SharedModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/a1100490/IdeaProjects/RxAngular/src/app/container/shared/shared.module.ts","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/a1100490/IdeaProjects/RxAngular/src/app/component/list/list.component.ts","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/a1100490/IdeaProjects/RxAngular/node_modules/base64-js/index.js\n// module id = jxpy\n// module chunks = 0","/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n /* tslint:disable */\n\n\nimport * as i0 from './list.component.css.shim.ngstyle';\nimport * as i1 from '@angular/core';\nimport * as i2 from '../../../../app/component/list/list.component';\nconst styles_ListComponent:any[] = [i0.styles];\nexport const RenderType_ListComponent:i1.RendererType2 = i1.ɵcrt({encapsulation:0,\n    styles:styles_ListComponent,data:{}});\nexport function View_ListComponent_0(_l:any):i1.ɵViewDefinition {\n  return i1.ɵvid(0,[(_l()(),i1.ɵeld(0,(null as any),(null as any),1,'p',([] as any[]),\n      (null as any),(null as any),(null as any),(null as any),(null as any))),(_l()(),\n      i1.ɵted((null as any),['\\n  list works!\\n'])),(_l()(),i1.ɵted((null as any),\n      ['\\n']))],(null as any),(null as any));\n}\nexport function View_ListComponent_Host_0(_l:any):i1.ɵViewDefinition {\n  return i1.ɵvid(0,[(_l()(),i1.ɵeld(0,(null as any),(null as any),1,'app-list',([] as any[]),\n      (null as any),(null as any),(null as any),View_ListComponent_0,RenderType_ListComponent)),\n      i1.ɵdid(114688,(null as any),0,i2.ListComponent,([] as any[]),(null as any),\n          (null as any))],(_ck,_v) => {\n    _ck(_v,1,0);\n  },(null as any));\n}\nexport const ListComponentNgFactory:i1.ComponentFactory<i2.ListComponent> = i1.ɵccf('app-list',\n    i2.ListComponent,View_ListComponent_Host_0,{},{},([] as any[]));\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL2ExMTAwNDkwL0lkZWFQcm9qZWN0cy9SeEFuZ3VsYXIvc3JjL2FwcC9jb21wb25lbnQvbGlzdC9saXN0LmNvbXBvbmVudC5uZ2ZhY3RvcnkudHMiLCJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZzovLy9Vc2Vycy9hMTEwMDQ5MC9JZGVhUHJvamVjdHMvUnhBbmd1bGFyL3NyYy9hcHAvY29tcG9uZW50L2xpc3QvbGlzdC5jb21wb25lbnQudHMiLCJuZzovLy9Vc2Vycy9hMTEwMDQ5MC9JZGVhUHJvamVjdHMvUnhBbmd1bGFyL3NyYy9hcHAvY29tcG9uZW50L2xpc3QvbGlzdC5jb21wb25lbnQuaHRtbCIsIm5nOi8vL1VzZXJzL2ExMTAwNDkwL0lkZWFQcm9qZWN0cy9SeEFuZ3VsYXIvc3JjL2FwcC9jb21wb25lbnQvbGlzdC9saXN0LmNvbXBvbmVudC50cy5MaXN0Q29tcG9uZW50X0hvc3QuaHRtbCJdLCJzb3VyY2VzQ29udGVudCI6WyIgIiwiPHA+XG4gIGxpc3Qgd29ya3MhXG48L3A+XG4iLCI8YXBwLWxpc3Q+PC9hcHAtbGlzdD4iXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7b0JDQUE7TUFBQSx3RUFBRzthQUFBLHVDQUVDO01BQUE7OztvQkNGSjtNQUFBO2FBQUE7VUFBQTtJQUFBOzs7OyJ9\n\n\n\n// WEBPACK FOOTER //\n// /Users/a1100490/IdeaProjects/RxAngular/src/$$_gendir/app/component/list/list.component.ngfactory.ts","/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n /* tslint:disable */\n\n\nexport const styles:any[] = [''];\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL2ExMTAwNDkwL0lkZWFQcm9qZWN0cy9SeEFuZ3VsYXIvc3JjL2FwcC9jb21wb25lbnQvbGlzdC9saXN0LmNvbXBvbmVudC5jc3Muc2hpbS5uZ3N0eWxlLnRzIiwidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmc6Ly8vVXNlcnMvYTExMDA0OTAvSWRlYVByb2plY3RzL1J4QW5ndWxhci9zcmMvYXBwL2NvbXBvbmVudC9saXN0L2xpc3QuY29tcG9uZW50LmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIgIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7In0=\n\n\n\n// WEBPACK FOOTER //\n// /Users/a1100490/IdeaProjects/RxAngular/src/$$_gendir/app/component/list/list.component.css.shim.ngstyle.ts","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/a1100490/IdeaProjects/RxAngular/node_modules/buffer/node_modules/isarray/index.js\n// module id = rD4C\n// module chunks = 0","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nconst Api = {\n  NEWS: '/api/v0/news.json',\n  NEWEST: '/api/v0/newest.json',\n  ASK: '/api/v0/ask.json',\n  SHOW: '/api/v0/show.json',\n  JOBS: '/api/v0/jobs.json'\n}\n\n@Injectable()\nexport class HackerNewsService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  private request(sApi) {\n    return this.http.get(`https://hnpwa.com${sApi}`);\n  }\n\n  public fetchNEWS() {\n    return this.request(Api.NEWS);\n  }\n\n  public fetchNEWEST() {\n    return this.request(Api.NEWEST);\n  }\n\n  public fetchASK() {\n    return this.request(Api.NEWS);\n  }\n\n  public fetchSHOW() {\n    return this.request(Api.SHOW);\n  }\n\n  public fetchJOBS() {\n    return this.request(Api.JOBS);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/a1100490/IdeaProjects/RxAngular/src/app/service/hacker-news.service.ts","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/a1100490/IdeaProjects/RxAngular/node_modules/buffer/index.js\n// module id = v0OU\n// module chunks = 0"],"sourceRoot":"webpack:///"}